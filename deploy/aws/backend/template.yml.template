# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  pizza42

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:

  Auth0Domain:
    Type: String
    Description: Auth0 domain
    Default: YOUR_AUTH0_DOMAIN

  DomainCertificateArn:
    Type: String
    Description: Domain certificate ARN
    Default: YOUR_DOMAIN_CERTIFICATE_ARN

  ClientId:
    Type: String
    Description: Management API client ID
    Default: YOUR_CLIENT_ID

  ClientSecret:
    Type: String
    Description: Management API client secret
    Default: YOUR_CLIENT_SECRET

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  Pizza42Api:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        Authorizers:
          Pizza42:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
        DefaultAuthorizer: Pizza42
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'OPTIONS, POST'"
        AllowOrigin: "'https://pizza.auth.yoga'"
        AllowCredentials: true
      Domain:
        DomainName: api.pizza.auth.yoga
        CertificateArn: !Ref DomainCertificateArn
        SecurityPolicy: TLS_1_2
      StageName: Prod

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/authorizer.handler
      Runtime: nodejs14.x
      Description: JWT authorizer.

  AuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - Pizza42Api
      - AuthorizerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: AuthorizerFunction
      Principal: apigateway.amazonaws.com

  PlaceOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/placeOrder.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: Places an order on behalf of the user.
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Pizza42Api
            Path: /orders
            Method: POST

  PlaceOrderCorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/placeOrder.corsHandler
      Runtime: nodejs14.x
    Events:
      Api:
        Type: Api
        Properties:
          RestApiId: !Ref Pizza42Api
          Path: /orders
          Method: OPTIONS

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Pizza42Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
